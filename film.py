# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Film(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, film_id: str=None, name: str=None, genre: str=None, year_of_creation: str=None):  # noqa: E501
        """Film - a model defined in Swagger

        :param film_id: The film_id of this Film.  # noqa: E501
        :type film_id: str
        :param name: The name of this Film.  # noqa: E501
        :type name: str
        :param genre: The genre of this Film.  # noqa: E501
        :type genre: str
        :param year_of_creation: The year_of_creation of this Film.  # noqa: E501
        :type year_of_creation: str
        """
        self.swagger_types = {
            'film_id': str,
            'name': str,
            'genre': str,
            'year_of_creation': str
        }

        self.attribute_map = {
            'film_id': 'film_id',
            'name': 'name',
            'genre': 'genre',
            'year_of_creation': 'year_of_creation'
        }
        self._film_id = film_id
        self._name = name
        self._genre = genre
        self._year_of_creation = year_of_creation

    @classmethod
    def from_dict(cls, dikt) -> 'Film':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Film of this Film.  # noqa: E501
        :rtype: Film
        """
        return util.deserialize_model(dikt, cls)

    @property
    def film_id(self) -> str:
        """Gets the film_id of this Film.


        :return: The film_id of this Film.
        :rtype: str
        """
        return self._film_id

    @film_id.setter
    def film_id(self, film_id: str):
        """Sets the film_id of this Film.


        :param film_id: The film_id of this Film.
        :type film_id: str
        """

        self._film_id = film_id

    @property
    def name(self) -> str:
        """Gets the name of this Film.


        :return: The name of this Film.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Film.


        :param name: The name of this Film.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def genre(self) -> str:
        """Gets the genre of this Film.

        Жанр фильма  # noqa: E501

        :return: The genre of this Film.
        :rtype: str
        """
        return self._genre

    @genre.setter
    def genre(self, genre: str):
        """Sets the genre of this Film.

        Жанр фильма  # noqa: E501

        :param genre: The genre of this Film.
        :type genre: str
        """
        allowed_values = ["Fantasy", "Drama", "Comedy", "Romance", "Comedy", "Detective", "Thriller", "Horror", "Cartoon", "Documentary", "TV show"]  # noqa: E501
        if genre not in allowed_values:
            raise ValueError(
                "Invalid value for `genre` ({0}), must be one of {1}"
                .format(genre, allowed_values)
            )

        self._genre = genre

    @property
    def year_of_creation(self) -> str:
        """Gets the year_of_creation of this Film.


        :return: The year_of_creation of this Film.
        :rtype: str
        """
        return self._year_of_creation

    @year_of_creation.setter
    def year_of_creation(self, year_of_creation: str):
        """Sets the year_of_creation of this Film.


        :param year_of_creation: The year_of_creation of this Film.
        :type year_of_creation: str
        """

        self._year_of_creation = year_of_creation
